ListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
ListView.startMultipleModal();


	private class ModeCallback implements ListView.MultiChoiceModeListener {
//		private View mMultiSelectActionBarView;
//		private TextView mSelectedConvCount;
		private HashSet<Long> mSelectedThreadIds;
		private ArrayList<Conversation> mSelectedNumbers;
		private Button mChooseAllButton;
		private Menu mMenu;
		private ActionMode mMode;
		
		public boolean onCreateActionMode(ActionMode mode, Menu menu) {
			MmsActivity mmsActivity = (MmsActivity) getActivity();
			mmsActivity.onEditChanged(true);

			MenuInflater inflater = mmsActivity.getMenuInflater();
			if (mSelectedThreadIds == null) {
				mSelectedThreadIds = new HashSet<Long>();
			}

			if (mSelectedNumbers == null) {
				mSelectedNumbers = new ArrayList<Conversation>();
			}

			inflater.inflate(R.menu.conversation_multi_select_menu, menu);

			mMenu = menu;
			mMode = mode;
			
//			if (mMultiSelectActionBarView == null) {
//				mMultiSelectActionBarView = (ViewGroup) LayoutInflater
//						.from(getActivity())
//						.inflate(
//								R.layout.conversation_list_multi_select_actionbar,
//								null);
//
//				mSelectedConvCount = (TextView) mMultiSelectActionBarView
//						.findViewById(R.id.selected_conv_count);
//			}
			mMode.setTitle(R.string.actionbar_select_number);
			mChooseAllButton = (Button)getActivity().getActionBar().getMultiChoiceView();
			mChooseAllButton.setOnClickListener(new View.OnClickListener() {
				public void onClick(View view) {
					ListView listView = getListView();
					ConversationListAdapter adapter = (ConversationListAdapter) listView
							.getAdapter();
					if (mSelectedThreadIds.size() == listView.getAdapter()
							.getCount()) {
						listView.clearChoices();
						adapter.uncheckAll();
						setAllStatus(false);
					} else {
						listView.selectAllItems();
						adapter.checkAll();
						setAllStatus(true);
					}
					updateActionBar();
				}
			});

			ListView listView = getListView();
			ConversationListAdapter adapter = (ConversationListAdapter) listView
					.getAdapter();
			adapter.setEditMode(true);
			mIsMulMode = true;
			updateActionBar();
			return true;
		}

		public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
//			if (mMultiSelectActionBarView == null) {
//				ViewGroup v = (ViewGroup) LayoutInflater
//						.from(getActivity())
//						.inflate(
//								R.layout.conversation_list_multi_select_actionbar,
//								null);
//				mode.setCustomView(v);
//
//				mSelectedConvCount = (TextView) v
//						.findViewById(R.id.selected_conv_count);
//			}
			return true;
		}

		private void updateActionBar() {
			ListView listView = getListView();
			final int checkedCount = listView.getCheckedItemCount();
			mMode.setTitle(String.format(
					getActivity().getString(R.string.actionbar_select_number),
					checkedCount));

			if (checkedCount == listView.getAdapter().getCount()) {
				mChooseAllButton.setText(R.string.cancel_choose);
			} else {
				mChooseAllButton.setText(R.string.choose_all);
			}

			setMenuEnable(checkedCount > 0 ? true : false);
		}

		private void setMenuEnable(boolean enable) {
			if (mMenu != null) {
				MenuItem deleteItem = mMenu.findItem(R.id.delete);
				deleteItem.setEnabled(enable);
				MenuItem sendMsgItem = mMenu.findItem(R.id.send_msg);
				sendMsgItem.setEnabled(enable);
			}
		}

		public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
			switch (item.getItemId()) {
			case R.id.delete:
				if (mSelectedThreadIds.size() > 0) {
					confirmDeleteThreadDialog(new DeleteThreadListener(
							mSelectedThreadIds, mQueryHandler, getActivity()),
							mSelectedThreadIds, true, getActivity());
					// mode.finish();
				} else {
					Toast.makeText(getActivity(),
							getActivity().getString(R.string.select_msg),
							Toast.LENGTH_SHORT).show();
				}
				break;
			case R.id.send_msg:
				if (mSelectedNumbers == null || mSelectedNumbers.size() <= 0) {
					Toast.makeText(
							getActivity(),
							getActivity().getString(
									R.string.noperson_to_blacklist),
							Toast.LENGTH_SHORT).show();
					break;
				}

				ArrayList<String> numbers = new ArrayList<String>();
				for (int i = 0; i < mSelectedNumbers.size(); i++) {
					String[] adds = mSelectedNumbers.get(i).getAddress()
							.split(",");
					for (int j = 0; j < adds.length; j++) {
						if (!numbers.contains(adds[j]))
							numbers.add(adds[j]);
					}
				}

				if (numbers.size() > 200) {
					Toast.makeText(
							getActivity(),
							getActivity().getString(
									R.string.to_much_address_tip),
							Toast.LENGTH_SHORT).show();
					return true;
				}

				Intent sendMsgIntent = new Intent(getActivity(),
						HandleIntentMessageActivity.class);

				Bundle numberBundle = new Bundle();
				numberBundle.putString("address",
						TextUtils.join(",", numbers.toArray()));
				sendMsgIntent.putExtras(numberBundle);
				startActivity(sendMsgIntent);
				getActivity().getActionBar().actionModeManualFinish();
				break;
			default:
				break;
			}
			return false;
		}

		public void onDestroyActionMode(ActionMode mode) {
			MmsActivity mmsActivity = (MmsActivity) getActivity();
			mmsActivity.onEditChanged(false);
			mSelectedNumbers.clear();
			try {
				ListView listView = getListView();
				ConversationListAdapter adapter = (ConversationListAdapter) listView
						.getAdapter();
				adapter.uncheckAll();
				adapter.setEditMode(false);
				listView.clearChoices();
				mSelectedThreadIds = null;
				mIsMulMode = false;
				
				getListView().postDelayed(new Runnable() {
					public void run() {
						getListView().setChoiceMode(ListView.CHOICE_MODE_NONE);
					}
				}, 500);
			} catch (IllegalStateException e) {
				Log.e(TAG, "get listView failed");
			}
		}

		public void onItemCheckedStateChanged(ActionMode mode, int position,
				long id, boolean checked) {
			ListView listView = getListView();

			Cursor cursor = (Cursor) listView.getItemAtPosition(position);
			Conversation conv = Conversation.from(getActivity(), cursor);
			conv.setIsChecked(checked);
			long threadId = conv.getThreadId();

			if (checked) {
				mSelectedThreadIds.add(threadId);
				if (!mSelectedNumbers.contains(conv)
						&& !conv.getPersonIds().isEmpty())
					mSelectedNumbers.add(conv);
			} else {
				mSelectedThreadIds.remove(threadId);
				mSelectedNumbers.remove(conv);
			}

			updateActionBar();
		}

		private void setAllStatus(boolean checked) {
			ConversationListAdapter adapter = (ConversationListAdapter) getListView()
					.getAdapter();

			if (adapter != null) {
				int count = adapter.getCount();
				long threadId = 0;
				for (int i = 0; i < count; i++) {
					Cursor cursor = (Cursor) adapter.getItem(i);
					Conversation conv = Conversation
							.from(getActivity(), cursor);
					if (cursor != null && !cursor.isClosed()) {
						threadId = cursor.getLong(0);
						if (checked) {
							mSelectedThreadIds.add(threadId);
							if (!mSelectedNumbers.contains(conv)
									&& !conv.getPersonIds().isEmpty())
								mSelectedNumbers.add(conv);
						} else {
							mSelectedThreadIds.remove(threadId);
							mSelectedNumbers.remove(conv);
						}
					}

				}
			}
		}
	}
